{"version":3,"sources":["components/Home/Home.js","components/ChatRoom/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","roomName","setRoomName","name","setName","className","type","placeholder","value","onChange","event","target","to","ChatRoom","props","roomId","match","params","mess","setMess","newuser","setNewUser","socketRef","useRef","newMessage","setNewMessage","useEffect","current","socketIOClient","query","console","log","on","message","incomingMessage","ownedByCurrentUser","senderId","id","emit","a","welcome","map","user","i","key","body","onClick","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sUA8BeA,G,MAzBF,WAAO,IAAD,EAEiBC,mBAAS,IAF1B,mBAERC,EAFQ,KAEEC,EAFF,OAGSF,mBAAS,IAHlB,mBAGRG,EAHQ,KAGFC,EAHE,KAcf,OACI,yBAAKC,UAAU,kBACX,2BAAOC,KAAK,OAAOC,YAAY,OAAOC,MAAOP,EAAUQ,SAVtC,SAACC,GACtBR,EAAYQ,EAAMC,OAAOH,QAS8DH,UAAU,eAC7F,2BAAOC,KAAK,OAAOC,YAAY,OAAOC,MAAOL,EAAMM,SAPlC,SAACC,GACtBN,EAAQM,EAAMC,OAAOH,QAM8DH,UAAU,eACzF,kBAAC,IAAD,CAAMO,GAAE,WAAMX,EAAN,YAAkBE,IACtB,4BAAQE,UAAU,eAAlB,iB,iCCmDDQ,G,MArEE,SAACC,GAEd,IAAMC,EAASD,EAAME,MAAMC,OAAOF,OAC5BZ,EAAOW,EAAME,MAAMC,OAAOd,KAHR,EAKAH,mBAAS,IALT,mBAKjBkB,EALiB,KAKXC,EALW,OAMMnB,mBAAS,IANf,mBAMjBoB,EANiB,KAMRC,EANQ,KAOlBC,EAAYC,mBAPM,EAQYvB,mBAAS,IARrB,mBAQjBwB,EARiB,KAQLC,EARK,KAkBxBC,qBAAU,WACNJ,EAAUK,QAAUC,IAAe,wBAAyB,CACxDC,MAAO,CAAEd,YAEbe,QAAQC,IAAIT,EAAUK,SAEtBL,EAAUK,QAAQK,GAAG,kBAAkB,SAACC,GACpC,IAAMC,EAAe,2BACdD,GADc,IAEjBE,mBAAoBF,EAAQG,WAAad,EAAUK,QAAQU,KAE/DlB,GAAQ,SAACD,GAAD,4BAAcA,GAAd,CAAoBgB,UAGhCZ,EAAUK,QAAQW,KAAK,WAAvB,kBAA8CnC,IAC9CmB,EAAUK,QAAQK,GAAG,YAAY,SAACO,GAC9B,IAAMC,EAAO,YAAOD,GACpBlB,GAAW,SAAAkB,GAAC,4BAAQA,GAAR,CAAWC,YAG5B,CAACzB,IAWJ,OACI,yBAAKV,UAAU,uBACX,wBAAIA,UAAU,aAAd,SAAiCU,GACjC,yBAAKV,UAAU,sBACX,wBAAIA,UAAU,gBACTe,EAAQqB,KAAI,SAACC,EAAMC,GAAP,OAAc,wBAAIC,IAAKD,GAAID,MACvCxB,EAAKuB,KAAI,SAACR,EAASU,GAAV,OACN,wBAAIC,IAAKD,EAAGtC,UAAS,uBAAkB4B,EAAQE,mBAAqB,aAAe,qBAC9EF,EAAQY,KACT,4BAAKZ,EAAQS,YAK7B,8BAAUlC,MAAOgB,EAAYf,SAvBN,SAACC,GAC5Be,EAAcf,EAAMC,OAAOH,QAsBwCD,YAAY,mBAAmBF,UAAU,eACxG,4BAAQA,UAAU,cAAcyC,QApBd,WAlCN,IAACb,IAmCLT,EAlCZF,EAAUK,QAAQW,KAAK,iBAAkB,CACrCO,KAAMZ,EACNG,SAAUd,EAAUK,QAAQU,GAC5BK,KAAMvC,IAgCVsB,EAAc,MAkBV,WCnDGsB,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjC,kBAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,iBAAiBC,UAAWrC,OCDlCsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStC,MACvB,2DCZNuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMlC,c","file":"static/js/main.f6b2ae7a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport './Home.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = () => {\r\n\r\n    const [roomName, setRoomName] = useState('')\r\n    const [name, setName] = useState('')\r\n\r\n\r\n    const handleRoomChange = (event) => {\r\n        setRoomName(event.target.value)\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <input type=\"text\" placeholder=\"Room\" value={roomName} onChange={handleRoomChange} className=\"text-input\" />\r\n            <input type=\"text\" placeholder=\"Name\" value={name} onChange={handleNameChange} className=\"text-input\" />\r\n            <Link to={`/${roomName}/${name}`}>\r\n                <button className=\"join-button\">Join Room</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState, useEffect, useRef } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport './ChatRoom.css'\r\n\r\n\r\nconst ChatRoom = (props) => {\r\n\r\n    const roomId = props.match.params.roomId; \r\n    const name = props.match.params.name\r\n\r\n    const [mess, setMess] = useState([])\r\n    const [newuser, setNewUser] = useState([])\r\n    const socketRef = useRef()\r\n    const [newMessage, setNewMessage] = useState('')\r\n\r\n    const sendMessage = (message) => {\r\n        socketRef.current.emit(\"newChatMessage\", {\r\n            body: message,\r\n            senderId: socketRef.current.id,\r\n            user: name\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        socketRef.current = socketIOClient('http://localhost:8000', {\r\n            query: { roomId }\r\n        })\r\n        console.log(socketRef.current)\r\n\r\n        socketRef.current.on('newChatMessage', (message) => {\r\n            const incomingMessage = {\r\n                ...message,\r\n                ownedByCurrentUser: message.senderId === socketRef.current.id,\r\n            }\r\n            setMess((mess) => [...mess, incomingMessage])\r\n        })\r\n\r\n        socketRef.current.emit('new-user', `Welcome ${name}`)\r\n        socketRef.current.on('new-user', (a) => {\r\n            const welcome = [...a]\r\n            setNewUser(a => [...a, welcome])\r\n        })\r\n        // eslint-disable-next-line\r\n    }, [roomId])\r\n\r\n    const handleNewMessageChange = (event) => {\r\n        setNewMessage(event.target.value)\r\n    }\r\n\r\n    const handleSendMessage = () => {\r\n        sendMessage(newMessage)\r\n        setNewMessage('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat-room-container\">\r\n            <h1 className=\"room-name\">Room: {roomId}</h1>\r\n            <div className=\"messages-container\">\r\n                <ol className=\"message-list\">\r\n                    {newuser.map((user, i) => (<h4 key={i}>{user}</h4>))}\r\n                    {mess.map((message, i) => (\r\n                        <li key={i} className={`message-item ${message.ownedByCurrentUser ? 'my-message' : 'received-message'}`}>\r\n                            {message.body}\r\n                            <h5>{message.user}</h5>\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n            <textarea value={newMessage} onChange={handleNewMessageChange} placeholder=\"Write message...\" className=\"send-field\" />\r\n            <button className=\"send-button\" onClick={handleSendMessage}>Send</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom","import React from 'react';\nimport './App.css';\n\nimport { HashRouter, Switch, Route} from 'react-router-dom'\n\nimport Home from './components/Home/Home'\nimport ChatRoom from './components/ChatRoom/ChatRoom'\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:roomId/:name\" component={ChatRoom} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}